<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>myfirstblog</title>
      <link href="/posts/f908.html"/>
      <url>/posts/f908.html</url>
      
        <content type="html"><![CDATA[<h1 id="实习第十周学习总结（10月24日-10月29）"><a href="#实习第十周学习总结（10月24日-10月29）" class="headerlink" title="实习第十周学习总结（10月24日-10月29）"></a>实习第十周学习总结（10月24日-10月29）</h1><h2 id="打印功能实现"><a href="#打印功能实现" class="headerlink" title="打印功能实现"></a>打印功能实现</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>在我们的实际工作中，经常需要实现打印功能。但由于历史原因，Java 提供的打印功能一直都比较弱。实际上最初的 jdk 根本不支持打印，直到 jdk1.1 才引入了很轻量的打印支持。实际上，SUN 公司也一直致力于 Java 打印功能的完善，而 Java2 平台则终于有了一个健壮的打印模式的开端， jdk1.4 则提供了一套完整的”Java 打印服务 API” （Java Print Service API），它对已有的打印功能是积极的补充。</p><p>这里打印对象主要是图片和pdf文件两种常见形式，其他office文件可以通过相应程序转成pdf进行打印，比如aspose(收费，需要破解)&#x2F;openoffice(需要先搭建本地服务)&#x2F;Jacob(只有windows)</p><h3 id="二、打印实践"><a href="#二、打印实践" class="headerlink" title="二、打印实践"></a>二、打印实践</h3><p>首先要保证电脑GUI打印能正常运行，否则连打印机都没有连接，那怎么打印？</p><h4 id="1、JPG图片打印"><a href="#1、JPG图片打印" class="headerlink" title="1、JPG图片打印"></a>1、JPG图片打印</h4><p>打印JPG图片格式的文件，本次采用的Java原生的打印方式。jdk1.4之后对打印功能有了很好的支持。Java 的打印 API 主要存在于 java.awt.print 包中。而 jdk1.4 新增的类则主要存在于 javax.print 包及其相应的子包 javax.print.event 和 javax.print.attribute 中。其中** javax.print 包中主要包含打印服务的相关类，而 javax.print.event 则包含打印事件的相关定义，javax.print.attribute 则包括打印服务的可用属性列表等**。可以很好的解决打印JPG图片格式的需求。</p><p>优点：jdk的原生支持的打印功能，可直接使用，支持设置各项打印参数。</p><p>缺点：局限性较大，只能打印一些图片和文本格式的文件。</p><p>public class PrintUtil {<br>    &#x2F;**<br>     * 打印图片<br>     * @param file<br>     * @param printerName<br>     * @throws PrintException<br>     *&#x2F;<br>    public static void JPGPrint(File file,String printerName) throws PrintException {<br>        if (file &#x3D;&#x3D; null||printerName&#x3D;&#x3D;null) {<br>            System.err.println(“缺少打印文件或者缺少打印机参数”);<br>        }<br>        InputStream fis &#x3D; null;</p><pre><code>    try &#123;        // 设置打印格式，如果未确定类型，可选择autosense        // 设置为jpg格式        DocFlavor flavor = DocFlavor.INPUT_STREAM.JPEG;        // 设置打印参数        PrintRequestAttributeSet hashset = new HashPrintRequestAttributeSet();        //份数        hashset.add(new Copies(1));        //装订        //hashset.add(Finishings.STAPLE);        //单双面        hashset.add(Sides.DUPLEX);        // 颜色        hashset.add(Chromaticity.COLOR);        // 定位打印服务        PrintService printService = null;        if (printerName != null) &#123;            //获得本台电脑连接的所有打印机            PrintService[] printServices = PrinterJob.lookupPrintServices();            if(printServices == null || printServices.length == 0) &#123;                System.out.print(&quot;打印失败，未找到可用打印机，请检查。&quot;);                return ;            &#125;            //匹配指定打印机            for (int i = 0;i &lt; printServices.length; i++) &#123;                if (printServices[i].getName().contains(printerName)) &#123;                    printService = printServices[i];                    break;                &#125;            &#125;            if(printService==null)&#123;                System.out.print(&quot;打印失败，未找到名称为&quot; + printerName + &quot;的打印机，请检查。&quot;);                return ;            &#125;        &#125;        // 构造待打印的文件流        fis = new FileInputStream(file);        Doc doc = new SimpleDoc(fis, flavor, null);        // 创建打印作业        DocPrintJob job = printService.createPrintJob();        job.print(doc, hashset);    &#125; catch (FileNotFoundException e1) &#123;        System.err.println(&quot;文件未找到&quot;);        e1.printStackTrace();    &#125; finally &#123;        // 关闭打印的文件流        if (fis != null) &#123;            try &#123;                fis.close();            &#125; catch (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;public static void main(String[] args) throws Exception &#123;    JPGPrint(new File(&quot;D:\\share\\111.jpg&quot;),&quot;MI&quot;);&#125;</code></pre><p>}</p><h4 id="2、图片-x2F-pdf原生打印"><a href="#2、图片-x2F-pdf原生打印" class="headerlink" title="2、图片&#x2F;pdf原生打印"></a>2、图片&#x2F;pdf原生打印</h4><p>这里pdf打印可能和硬件有关系，需要安装Adobe Reader，而且现在pdf也不使用此方法打印，可以用作借鉴</p><p>public class PrintUtil {</p><pre><code>/** * 打印服务 * @param file 文件 * @Param printerName 打印机名字 * @param num 打印份数 */public static void paperPrint(File file, String printerName, int num)&#123;    // 构建打印请求属性集    DocFlavor flavor = DocFlavor.INPUT_STREAM.AUTOSENSE;    // 设置打印格式    PrintRequestAttributeSet pras = new HashPrintRequestAttributeSet();    // 查找所有的打印服务    PrintService[] printServices = PrintServiceLookup.lookupPrintServices(flavor, pras);    // 打印服务    PrintService printService = null;    for (PrintService ps : printServices) &#123;        String psName = ps.toString();        // 选用指定打印机，需要精确查询打印机就用equals，模糊查询用contains，这里使用了模糊查找        if (psName.contains(printerName)) &#123;            printService=ps;            break;        &#125;    &#125;    // 如果找不到打印机    if(printService == null)&#123;        System.err.println(&quot;找不到打印机&quot;);        return;    &#125;    // 文件不存在    if (!file.exists() || !file.isFile()) &#123;        System.err.println(&quot;文件不存在&quot;);        return;    &#125;    String fileName = file.getName();    // 获取图片后缀名，设置打印文件格式    String suffix = fileName.substring(fileName.lastIndexOf(&quot;.&quot;) + 1);    switch (suffix) &#123;        case &quot;jpg&quot;:        case &quot;jpeg&quot;:            flavor = DocFlavor.INPUT_STREAM.JPEG;            break;        case &quot;png&quot;:            flavor = DocFlavor.INPUT_STREAM.PNG;            break;        case &quot;pdf&quot;:            flavor = DocFlavor.INPUT_STREAM.PDF;            break;        case &quot;gif&quot;:            flavor = DocFlavor.INPUT_STREAM.GIF;            break;        default:            System.err.println(&quot;其他类别文件不支持打印&quot;);            return;    &#125;    // 设置打印文件名    pras.add(new JobName(fileName, Locale.CHINA));    // 设置打印方向    pras.add(OrientationRequested.LANDSCAPE);    // 设置打印区域    //MediaPrintableArea mp = new MediaPrintableArea(0, 100, 230, 203, Size2DSyntax.MM);    //pras.add(mp);    // 设置彩打或者黑白打印    pras.add(Chromaticity.MONOCHROME);    try &#123;        FileInputStream fis = new FileInputStream(file);        HashDocAttributeSet das = new HashDocAttributeSet();        for (long i = 0; i &lt; num; i++) &#123;            // 使用打印服务生成打印任务            DocPrintJob job = printService.createPrintJob();            // 获取需要打印的文档类doc            SimpleDoc doc = new SimpleDoc(fis, flavor, das);            // 监听打印任务            job.addPrintJobListener(new PrintJobListener() &#123;                @Override                public void printDataTransferCompleted(PrintJobEvent pje) &#123;                    System.out.println(&quot;成功发送任务：&quot; + fileName);                &#125;                @Override                public void printJobCompleted(PrintJobEvent pje) &#123;                    System.out.println(&quot;打印任务完成！&quot;);                &#125;                @Override                public void printJobFailed(PrintJobEvent pje) &#123;                    System.out.println(&quot;打印任务失败：&quot; + fileName);                &#125;                @Override                public void printJobCanceled(PrintJobEvent pje) &#123;                    System.out.println(&quot;取消打印任务！&quot;);                &#125;                @Override                public void printJobNoMoreEvents(PrintJobEvent pje) &#123;                    System.out.println(&quot;没有更多方法提供打印机调用！&quot;);                &#125;                @Override                public void printJobRequiresAttention(PrintJobEvent pje) &#123;                    System.out.println(&quot;纸张已用完&quot;);                &#125;            &#125;);            job.print(doc, pras);        &#125;    &#125; catch (PrintException e) &#123;        e.printStackTrace();    &#125; catch (FileNotFoundException e) &#123;        e.printStackTrace();    &#125;&#125;public static void main(String[] args) &#123;    paperPrint(new File(&quot;D:\\share\\111.png&quot;),&quot;MI&quot;,1);    //paperPrint(new File(&quot;D:\\share\\123.pdf&quot;),&quot;MI&quot;,1);&#125;</code></pre><p>}</p><h4 id="3、PDF文件格式打印实现"><a href="#3、PDF文件格式打印实现" class="headerlink" title="3、PDF文件格式打印实现"></a>3、PDF文件格式打印实现</h4><p>这里使用Apache PDFbox来实现进行PDF文件格式的打印。Apache PDFbox是一个开源的、基于Java的、支持PDF文档生成的工具库，它可以用于创建新的PDF文档，修改现有的PDF文档，还可以从PDF文档中提取所需的内容。Apache PDFBox还包含了数个命令行工具。在此，我们只研究打印功能。</p><p>优点：功能强大，开源软件，较完美的解决了PDF格式文件的一系列处理，使用方便<br>首先导入依赖</p><dependency>  <groupId>org.apache.pdfbox</groupId>  <artifactId>pdfbox</artifactId>  <version>2.0.6</version></dependency>具体代码实现<p>public class PrintUtil {</p><pre><code>public static PrinterJob getPrintServiceByName(String printerName) throws Exception&#123;    PrinterJob job = PrinterJob.getPrinterJob();    // 遍历查询打印机名称    boolean flag = false;    for (PrintService ps : PrinterJob.lookupPrintServices()) &#123;        String psName = ps.toString();        // 选用指定打印机，需要精确查询打印机就用equals，模糊查询用contains，这里使用了模糊查找        if (psName.contains(printerName)) &#123;            flag = true;            job.setPrintService(ps);            break;        &#125;    &#125;    if(!flag)&#123;        System.err.println(&quot;未找到打印机&quot;);        throw new RuntimeException(&quot;打印失败，未找到名称为&quot; + printerName + &quot;的打印机，请检查你的打印机名字&quot;);    &#125;    return job;&#125;/** * 获取打印纸的大小范围 * @return */public static Paper getPaper() &#123;    Paper paper = new Paper();    // 默认为A4纸张，对应像素宽和高分别为 595, 842    int width = 595;    int height = 842;    // 设置边距，单位是像素，10mm边距，对应 28px    int marginLeft = 10;    int marginRight = 0;    int marginTop = 10;    int marginBottom = 0;    paper.setSize(width, height);    // 下面一行代码，解决了打印内容为空的问题    paper.setImageableArea(marginLeft, marginRight, width - (marginLeft + marginRight), height - (marginTop + marginBottom));    return paper;&#125;/** * 设置打印属性 * @param */public static void paperPDFPrint(PDDocument document, PrinterJob job)  &#123;    try &#123;        // 设置纸张及缩放        PDFPrintable pdfPrintable = new PDFPrintable(document, Scaling.ACTUAL_SIZE);        // 设置多页打印        Book book = new Book();        // 设置打印格式        PageFormat pageFormat = new PageFormat();        //设置纸张        pageFormat.setPaper(getPaper());        // 设置打印纸的方向,这是纵向        pageFormat.setOrientation(PageFormat.PORTRAIT);        // 设置一些属性 是否缩放 打印张数等        book.append(pdfPrintable, pageFormat, document.getNumberOfPages());        job.setPageable(book);        // 设置打印份数        job.setCopies(1);        //添加打印属性        HashPrintRequestAttributeSet pars = new HashPrintRequestAttributeSet();        // 设置单双页        pars.add(Sides.ONE_SIDED);        // 设置彩打或者黑白打印        pars.add(Chromaticity.MONOCHROME);        // 打印质量        pars.add(PrintQuality.NORMAL);        // 这是直接打印        job.print(pars);    &#125; catch (PrinterException e) &#123;        System.err.println(&quot;未正常连接打印机&quot;);        e.printStackTrace();    &#125; catch (Exception e)&#123;        System.err.println(&quot;打印机打印异常&quot;);        e.printStackTrace();    &#125;&#125;/** * 打印pdf文件 * @param pdfPath * @param printerName * @return * @throws Exception */public static PDDocument printPdf(String pdfPath, String printerName) throws Exception &#123;    File file = new File(pdfPath);    PDDocument document = PDDocument.load(file);    PrinterJob job = getPrintServiceByName(printerName);    paperPDFPrint(document, job);    return document;&#125;public static void main(String[] args) throws Exception &#123;      printPdf(&quot;D:\\share\\123.pdf&quot;,&quot;MI&quot;);&#125;</code></pre><h3 id="三、前端实现打印"><a href="#三、前端实现打印" class="headerlink" title="三、前端实现打印"></a>三、前端实现打印</h3><p>首先是使用下边代码，实现js局部打印功能。参数dom为需要打印的节点，为了保证页面功能的单一性，最好弹出一个新的预览页面完成打印功能。</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">function print(dom)&#123;   var body &#x3D; document.body.innerHTML;&#x2F;&#x2F;先获取当前页的html代码       document.body.innerHTML &#x3D; document.querySelector(dom).innerHTML;&#x2F;&#x2F;需要打印的页面       window.print();       document.body.innerHTML &#x3D;body;&#x2F;&#x2F;打印完成之后，还原界面&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
